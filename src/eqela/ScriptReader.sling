
/*
 * This file is part of Eqela Tools
 * Copyright (c) 2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func tryReadFile(file as File, code as Script) static
{
	if not file:
		throw ScriptException.forError(SourceReference.forFile(file), "null file")
	if not code:
		throw ScriptException.forError(SourceReference.forFile(file), "No code object given")
	var it = file.readLines()
	if not it:
		throw ScriptException.forError(SourceReference.forFile(file), "Failed to read file")
	var linen = 0
	var function as ScriptFunction
	loop {
		var line = it.next()
		if not line:
			break
		linen ++
		line = String.strip(line)
		if String.isEmpty(line) || String.startsWith(line, "#"):
			continue
		var src = SourceReference.forLine(file, linen, line)
		while String.endsWith(line, "\\") {
			var xt = it.next()
			if not xt:
				break
			linen ++
			xt = String.strip(xt)
			if String.isEmpty(xt) || String.startsWith(xt, "#"):
				continue
			line = String.strip(String.getSubString(line, 0, String.getLength(line) - 1)) .. " " .. xt
		}
		if function {
			if line == "}" {
				function = null
				continue
			}
			var words = String.split(line, ' ', 2)
			if Vector.getSize(words) < 1:
				throw ScriptException.forError(src, "Invalid syntax for statement")
			var cmd = ScriptStatement.forCommand(Vector.get(words, 0))
			cmd.setSource(src)
			foreach arg in String.quotedStringToVector(Vector.get(words, 1), ' '):
				cmd.addToArguments(arg)
			function.addToStatements(cmd)
		}
		else {
			if String.endsWith(line, "{") {
				var fname = String.strip(String.getSubString(line, 0, String.getLength(line)-1))
				if String.isEmpty(fname):
					throw ScriptException.forError(src, "Invalid function name: `" .. fname .. "'")
				function = new ScriptFunction()
				function.setName(fname)
				code.addToFunctions(function)
				continue
			}
			if String.startsWith(line, "include ") {
				tryReadFile(file.getSibling(String.getSubString(line, 8)), code)
				continue
			}
			if String.startsWith(line, "use ") || String.startsWith(line, "tool ") || String.startsWith(line, "lib ") {
				var cds = Vector.get(String.split(line, ' ', 2), 1)
				var cd = PackageDescription.forString(cds)
				if not cd:
					throw ScriptException.forError(src, "Invalid package description: `" .. cds .. "'")
				cd.setSource(src)
				code.addToUses(cd)
				continue
			}
			if String.startsWith(line, "set ") {
				var words = String.quotedStringToVector(line, ' ')
				if Vector.getSize(words) != 3:
					throw ScriptException.forError(src, "Invalid set statement")
				var key = Vector.get(words, 1)
				if String.isEmpty(key):
					throw ScriptException.forError(src, "Empty key")
				code.setProperty(key, Vector.get(words, 2))
				continue
			}
		}
	}
}

func readFile(ctx as LoggingContext, file as File) static as Script
{
	assert file && file.isFile()
	var v = new Script()
	v.setSourceFile(file)
	v.setExecutionDirectory(file.getParent())
	try {
		tryReadFile(file, v)
	}
	catch(e as Exception) {
		Log.error(ctx, String.asString(e))
		v = null
	}
	return v
}
