
/*
 * This file is part of Eqela Tools
 * Copyright (c) 2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

import capex.util

func getEntries(file as File) static as vector<File>
{
	if not file:
		return null
	var v = new vector<File>
	var it = file.entries()
	while it {
		var e = it.next()
		if not e:
			break
		v += e
	}
	return v
}

func installPackageToDirectory(ctx as LoggingContext, package as File, directory as File) static as bool
{
	assert package
	assert directory
	if directory.exists() {
		Log.debug(ctx, "Removing existing package directory: `" .. directory.getPath() .. "'")
		directory.removeRecursive()
	}
	Log.debug(ctx, "Installing zip file `" .. package.getPath() .. "' to directory: `" .. directory.getPath() .. "'")
	var r = ZipReader.extractZipFileToDirectory(package, directory)
	Log.status(ctx, null)
	assert r
	var entries = assert getEntries(directory)
	if Vector.getSize(entries) != 1:
		return true
	var singleFile = Vector.get(entries, 0)
	if not singleFile || singleFile.isDirectory() == false:
		return true
	var v = true
	var it = singleFile.entries()
	while it {
		var ff = it.next()
		if not ff:
			break
		if ff.move(directory.entry(ff.baseName()), false) == false {
			Log.error(ctx, "Failed to move: `" .. ff.getPath() .. "': " .. ff.getLastErrorDescription())
			v = false
		}
	}
	if v:
		v = singleFile.removeDirectory()
	return v
}
