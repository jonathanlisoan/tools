
/*
 * This file is part of Eqela Tools
 * Copyright (c) 2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

prop ctx as LoggingContext
prop cacheDirectory as File
prop repositories as vector<PackageRepository>
prop customPackagePaths as map<string,File>
prop platforms as vector<string>
var defaultProperties as map<string,string>

ctor
{
	setDefaultProperty("date", DateTime.forNow().toStringDate(0 as char))
	setPlatform(null)
}

func setPlatform(platform as string)
{
	platforms = new vector<string>
	if platform:
		platforms += platform
	IFDEF "target_netcore" {
		platforms += "netcore21"
	}
	platforms += "all"
}

func setCustomPackagePathsAsString(v as string)
{
	customPackagePaths = null
	var values = assert QueryString.parse(v)
	foreach key in Map.getKeys(values) as! vector<string>:
		addToCustomPackagePaths(key, File.forPath(Map.get(values, key)))
}

func getCustomPackagePathsAsString as string
{
	assert customPackagePaths
	var sb = new StringBuilder()
	foreach key in Map.getKeys(customPackagePaths) as! vector<string> {
		var ff = Map.get(customPackagePaths, key)
		if not ff:
			continue
		var fp = ff.getPath()
		if not fp:
			fp = ""
		if sb.count() > 0:
			sb.append('&')
		sb.append(URLEncoder.encode(key))
		sb.append('=')
		sb.append(URLEncoder.encode(fp))
	}
	return sb.toString()
}

func setRepositoriesAsString(v as string)
{
	repositories = null
	assert String.isNotEmpty(v)
	foreach value in String.split(v, ',') {
		var vv = URLDecoder.decode(value)
		if String.isEmpty(vv):
			continue
		var rr = PackageRepository.forUrl(vv)
		if not rr:
			continue
		addToRepositories(rr)
	}
}

func getRepositoriesAsString as string
{
	var sb = new StringBuilder()
	foreach repository in repositories {
		var url = repository.toUrl()
		if String.isEmpty(url):
			continue
		if sb.count() > 0:
			sb.append(',')
		sb.append(URLEncoder.encode(url))
	}
	return sb.toString()
}

func addToCustomPackagePaths(id as string, file as File)
{
	assert id && file
	if not customPackagePaths:
		customPackagePaths = new map<string,File>
	customPackagePaths[id] = file
}

func setDefaultProperty(key as string, value as string) private
{
	assert key
	if not defaultProperties:
		defaultProperties = new map<string,string>
	defaultProperties[key] = value
}

func getInstallationDirectory(desc as PackageDescription) private as File
{
	assert cacheDirectory
	assert desc
	var cdir = assert cacheDirectory.entry(desc.getVendor()).entry(desc.getName()).entry(desc.getVersion())
	return cdir
}

func isInstalled(desc as PackageDescription) as bool
{
	var cd = assert getInstallationDirectory(desc)
	assert cd.isDirectory()
	return true
}

func addToRepositories(repo as PackageRepository)
{
	assert repo
	if not repositories:
		repositories = new vector<PackageRepository>
	Vector.prepend(repositories, repo)
}

func getRepositories as vector<PackageRepository>:
	return repositories

func uninstallPackage(desc as PackageDescription)
{
	var cdir = getInstallationDirectory(desc)
	if not cdir || cdir.isDirectory() == false:
		throw ExceptionWithString.forString("Uninstall: Failed to get the installation directory for package: `" .. desc.toString() .. "'")
	if not cdir.removeRecursive():
		throw ExceptionWithString.forString("Failed to remove directory: `" .. cdir.getPath() .. "'")
}

func installPackage(desc as PackageDescription, force as bool = false)
{
	if force == false && isInstalled(desc) {
		Log.debug(ctx, "Package already installed: `" .. desc.toString() .. "'.")
		return
	}
	if not desc:
		throw ExceptionWithString.forString("null description")
	Log.debug(ctx, "Trying to install package : `" .. desc.toString() .. "'")
	var repos = getRepositories()
	if Vector.getSize(repos) < 1:
		Log.warning(ctx, "No package repositories defined.")
	foreach repo in repos {
		var installer as object
		foreach platform in platforms {
			installer = repo.findInstaller(ctx, desc, platform)
			if installer:
				break
		}
		if not installer {
			Log.debug(ctx, "Repository `" .. repo.getRepositoryName() .. "' does not have package: `" .. desc.toString() .. "'")
			continue
		}
		var cdir = getInstallationDirectory(desc)
		if not cdir:
			throw ExceptionWithString.forString("Failed to determine directory for package: `" .. desc.toString() .. "'")
		var ii = repo.getInstaller(ctx, desc, installer, null)
		if not ii:
			throw ExceptionWithString.forString("Retrieval of package failed: `" .. desc.toString() .. "'")
		Log.status(ctx, "Installing package: `" .. desc.toString() .. "' ..")
		var r = PackageInstaller.installPackageToDirectory(ctx, ii, cdir)
		repo.releaseInstaller(ctx, ii)
		Log.status(ctx, null)
		if not r:
			throw ExceptionWithString.forString("Failed to install package: `" .. ii.getPath() .. "'")
		return
	}
	throw ExceptionWithString.forString("Package not found: `" .. desc.toString() .. "'")
}

func executeScriptFileFunction(cwd as File,file as File, function as string, args as vector<string>)
{
	var v = new Script()
	v.setSourceFile(file)
	v.setExecutionDirectory(cwd)
	ScriptReader.tryReadFile(file, v)
	executeScript(v, function, args)
}

class ParsedCommand public
{
	prop cstr  as string
	prop package as string
	prop command as string
}

func parseCommand(source as SourceReference, command as string) as ParsedCommand
{
	if String.isEmpty(command):
		throw ScriptException.forError(source, "Empty command for parseCommand")
	var c1s = String.split(command, '/', 2)
	var package = Vector.get(c1s, 0)
	var pcmd = Vector.get(c1s, 1)
	if String.isEmpty(package):
		throw ScriptException.forError(source, "Command has no package")
	if String.isEmpty(pcmd) {
		var c2s = String.split(package, ':')
		pcmd = Vector.get(c2s, 1)
	}
	if String.isEmpty(pcmd):
		throw ScriptException.forError(source, "Unable to determine the package-relative command")
	var v = new ParsedCommand()
	v.setCstr(command)
	v.setPackage(package)
	v.setCommand(pcmd)
	return v
}

func expandCommand(source as SourceReference, pc as ParsedCommand, props as map<string,string>) as ProcessLauncher
{
	if not pc:
		throw ScriptException.forError(source, "Null ParsedCommand!")
	var package = pc.getPackage()
	var pcmd = pc.getCommand()
	if String.isEmpty(package):
		throw ScriptException.forError(source, "Command has no package")
	if String.isEmpty(pcmd):
		throw ScriptException.forError(source, "Unable to determine the package-relative command")
	Log.debug(ctx, "For command `" .. pc.getCstr() .. "', looking for package-relative command `" .. pcmd .. "' in package `" .. package .. "'")
	var dir = File.forPath(Map.get(props, package))
	if dir.isDirectory() == false:
		throw ScriptException.forError(source, "Package directory does not exist: `" .. dir.getPath() .. "'")
	var dll = dir.entry(pcmd .. ".dll")
	Log.debug(ctx, "Checking dll: `" .. dll.getPath() .. "'")
	if dll.isFile() {
		var pl = ProcessLauncher.forSelf()
		if not pl:
			throw ScriptException.forError(source, "Failed to create self-process launcher")
		pl.addToParams(dll.getPath())
		return pl
	}
	var qx = dir.entry(pcmd .. ".qx")
	Log.debug(ctx, "Checking qx: `" .. qx.getPath() .. "'")
	if qx.isFile() {
		var pl = ProcessLauncher.forSelf()
		if not pl:
			throw ScriptException.forError(source, "Failed to create self-process launcher")
		pl.addToParams(qx.getPath())
		return pl
	}
	var binxf = dir.entry("bin").entry(pcmd).asExecutable()
	Log.debug(ctx, "Checking executable: `" .. binxf.getPath() .. "'")
	if binxf.isFile() {
		var pl = ProcessLauncher.forFile(binxf)
		if not pl:
			throw ScriptException.forError(source, "Failed to create process launcher for file: `" .. binxf.getPath() .. "'")
		return pl
	}
	var binf = dir.entry(pcmd).asExecutable()
	Log.debug(ctx, "Checking executable: `" .. binf.getPath() .. "'")
	if binf.isFile() {
		var pl = ProcessLauncher.forFile(binf)
		if not pl:
			throw ScriptException.forError(source, "Failed to create process launcher for file: `" .. binf.getPath() .. "'")
		return pl
	}
	throw ScriptException.forError(source, "No such command: `" .. pc.getCstr() .. "'")
	return null
}

func executeFunctionCallExpression(source as SourceReference, function as string, props as map<string,string>, args as vector<string>) as string
{
	if function == "getBasename" {
		return File.forPath(Vector.get(args, 0)).getBasename()
	}
	else if function == "getBasenameWithoutExtension" {
		return File.forPath(Vector.get(args, 0)).getBasenameWithoutExtension()
	}
	else if function == "getIdNameForPath" {
		var f = File.forPath(Vector.get(args, 0))
		if f.isDirectory():
			return f.getBasename()
		return f.getBasenameWithoutExtension()
	}
	else if function == "expandCommand" {
		var pc = assert parseCommand(source, Vector.get(args, 0))
		var pl = assert expandCommand(source, pc, props)
		return pl.getFullCommandString(false)
	}
	else if function == "getDateString" {
		return DateTime.forNow().toStringDate(0 as char)
	}
	else {
		throw ScriptException.forError(source, "Call to unsupported function: `" .. function .. "'")
	}
	return null
}

func executeFunctionCallExpressionString(source as SourceReference, str as string, props as map<string,string>) as string
{
	var function as string
	var args = new vector<string>
	var sb = new StringBuilder()
	var it = String.iterate(str)
	while it {
		var c = it.getNextChar()
		if c < 1:
			break
		if c == '(':
			break
		sb.append(c)
	}
	function = sb.toString()
	sb.clear()
	var parens = 1
	while it {
		var c = it.getNextChar()
		if c == ')':
			parens--
		if c < 1 || (c == ')' && parens == 0) || c == ',' {
			var cc = sb.toString()
			sb.clear()
			if cc {
				cc = processExpression(source, cc, props)
			}
			else {
				cc = ""
			}
			args += cc
			if c < 1 || c == ')':
				break
		}
		else {
			sb.append(c)
		}
	}
	return executeFunctionCallExpression(source, function, props, args)
}

func processExpression(source as SourceReference, orig as string, props as map<string,string>) private as string
{
	assert orig
	if String.indexOf(orig, "${") < 0:
		return orig
	var sb = new StringBuilder()
	var varbuf as StringBuilder
	var flag = false
	var it = String.iterate(orig)
	var braces = 0
	while it {
		var c = it.getNextChar()
		if c <= 0:
			break
		if varbuf {
			if c == '}' && braces == 1 {
				var varname = varbuf.toString()
				if String.startsWith(varname, "=") && String.contains(varname, "(") && String.endsWith(varname, ")") {
					sb.append(executeFunctionCallExpressionString(source, String.getSubString(varname, 1), props))
				}
				else if props {
					var r = Map.get(props, varname)
					if r:
						sb.append(r)
				}
				varbuf = null
			}
			else {
				varbuf.append(c)
			}
			if c == '}':
				braces --
			if c == '{':
				braces ++
			continue
		}
		if flag == true {
			flag = false
			if c == '{' {
				varbuf = new StringBuilder()
				braces ++
			}
			else {
				sb.append('$')
				sb.append(c)
			}
			continue
		}
		if c == '$' {
			flag = true
			continue
		}
		sb.append(c)
	}
	return sb.toString()
}

func processStatement(statement as ScriptStatement, props as map<string,string>, oargs as vector<string>) as ScriptStatement
{
	assert statement
	var v = new ScriptStatement()
	v.setSource(statement.getSource())
	v.setCommand(processExpression(statement.getSource(), statement.getCommand(), props))
	var args = new vector<string>
	foreach arg in statement.getArguments() {
		var s = processExpression(statement.getSource(), arg, props)
		if s == "$(*)" {
			foreach oarg in oargs:
				args += oarg
		}
		else if String.startsWith(s, "$(") && String.endsWith(s, ")") {
			var i = String.toInteger(String.getSubString(s, 2, String.getLength(s) - 3))
			if i >= 0 {
				var c = Vector.getSize(oargs)
				for(var n=i; n<c; n++):
					args += Vector.get(oargs, n)
			}
		}
		else {
			args += s
		}
	}
	v.setArguments(args)
	return v
}

func executeScriptFunction(script as Script, functionName as string, oprops as map<string,string>, args as vector<string>) private
{
	var functions = script.getFunctions()
	if Vector.getSize(functions) < 1:
		throw ExceptionWithString.forString("Script has no functions")
	var function as ScriptFunction
	if String.isEmpty(functionName) {
		var functions = script.getFunctions()
		function = Vector.get(functions, 0)
		if function == null:
			throw ExceptionWithString.forString("Failed to get the default function!")
	}
	else {
		function = script.getFunction(functionName)
		if function == null:
			throw ExceptionWithString.forString("No such function: `" .. functionName .. "'")
	}
	var props = new map<string,string>
	if oprops {
		foreach key in Map.getKeys(oprops) as! vector<string>:
			props[key] = oprops[key]
	}
	if args {
		var counter = 1
		foreach arg in args {
			if String.contains(arg, "=") {
				var comps = String.split(arg, '=', 2)
				var key = Vector.get(comps, 0)
				var val = Vector.get(comps, 1)
				if String.isEmpty(key):
					throw ScriptException.forError(null, "Invalid argument with empty key: `" .. arg .. "'")
				props[key] = val
			}
			else {
				props[String.forInteger(counter++)] = arg
			}
		}
	}
	Log.debug(ctx, "Executing function `" .. function.getName() .. "' from script: `" .. script.getSourcePath() .. "'")
	var cwd = script.getExecutionDirectory()
	foreach ostatement in function.getStatements() {
		var statement = processStatement(ostatement, props, args)
		var command = statement.getCommand()
		var args = statement.getArguments()
		if command == "exec" {
			var cmd as string
			var cmdargs = new vector<string>
			foreach arg in args {
				if not cmd {
					cmd = arg
				}
				else {
					cmdargs += arg
				}
			}
			if String.isEmpty(cmd):
				throw ScriptException.forError(statement.getSource(), "Empty command")
			var cmdf = File.forRelativePath(cmd, cwd).asExecutable()
			if cmdf.exists() == false:
				throw ScriptException.forError(statement.getSource(), "Command executable was not found: `" .. cmd .. "'")
			var pl = ProcessLauncher.forFile(cmdf)
			if not pl:
				throw ScriptException.forError(statement.getSource(), "Failed to create process launcher for command: `" .. cmd .. "'")
			pl.setCwd(cwd)
			foreach arg in cmdargs:
				pl.addToParams(arg)
			Log.debug(ctx, "Executing command: `" .. String.asString(pl) .. "'")
			var v = pl.execute()
			if v != 0:
				throw ExceptionWithString.forString("Command `" .. command .. "' returned with errors status `" .. String.forInteger(v) .. "'")
			continue
		}
		if command == "set" {
			var key = Vector.get(args, 0)
			var val = Vector.get(args, 1)
			if String.isEmpty(key):
				throw ScriptException.forError(statement.getSource(), "`set' statement without a key")
			props[key] = val
			continue
		}
		if command == "setDefault" {
			var key = Vector.get(args, 0)
			var val = Vector.get(args, 1)
			if String.isEmpty(key):
				throw ScriptException.forError(statement.getSource(), "`setDefault' statement without a key")
			if Map.get(props, key) == null:
				props[key] = val
			continue
		}
		if command == "requireValue" {
			var key = Vector.get(args, 0)
			if String.isEmpty(Map.get(props, key)):
				throw ScriptException.forError(statement.getSource(), "Required value not supplied: `" .. key .. "'")
			continue
		}
		if command == "use" {
			usePackage(script, PackageDescription.forString(Vector.get(args, 0)), props)
			continue
		}
		if command == "call" {
			var fn = Vector.get(args, 0)
			if String.isEmpty(fn):
				throw ScriptException.forError(statement.getSource(), "`call' statement without parameter")
			var nargs = new vector<string>
			for(var n=1; n<Vector.getSize(args); n++):
				nargs += Vector.get(args, n)
			executeScriptFunction(script, fn, oprops, nargs)
			continue
		}
		if command == "info" {
			Log.info(ctx, String.combine(args, ' '))
			continue
		}
		if command == "warning" {
			Log.warning(ctx, String.combine(args, ' '))
			continue
		}
		if command == "error" {
			Log.error(ctx, String.combine(args, ' '))
			continue
		}
		if command == "debug" {
			Log.debug(ctx, String.combine(args, ' '))
			continue
		}
		var pc = parseCommand(statement.getSource(), command)
		if not pc:
			throw ScriptException.forError(statement.getSource(), "Unable to parse command: `" .. command .. "'")
		var package = pc.getPackage()
		var pcmd = pc.getCommand()
		Log.debug(ctx, "Executing command `" .. pcmd .. "' from package `" .. package .. "'")
		var packageDirectory = File.forPath(Map.get(props, package))
		var xf = packageDirectory.entry(pcmd .. ".qx")
		if xf.isFile() {
			executeScriptFileFunction(cwd, xf, null, args)
			continue
		}
		var pl = expandCommand(statement.getSource(), pc, props)
		if pl {
			pl.setCwd(cwd)
			foreach arg in args:
				pl.addToParams(arg)
			Log.debug(ctx, "Executing command: `" .. String.asString(pl) .. "'")
			var eb = new StringBuilder()
			pl.setErrorBuffer(eb)
			var v = pl.execute()
			Log.debug(ctx, "Command executed: Return value = " .. String.forInteger(v))
			if v != 0:
				throw ExceptionWithString.forString("Command `" .. command .. "' returned with error status `" .. String.forInteger(v) .. "': " .. eb.toString())
			continue
		}
		throw ScriptException.forError(statement.getSource(), "Command not found: `" .. command .. "'")
	}
}

func processExternalPackageScripts(script as Script, dir as File)
{
	assert dir
	var file = dir.entry("functions.qx")
	assert file.isFile()
	var v = new Script()
	v.setSourceFile(file)
	ScriptReader.tryReadFile(file, v)
	foreach function in v.getFunctions() {
		var fname = function.getName()
		if String.isEmpty(fname):
			continue
		if script.getFunction(fname):
			continue
		script.addToFunctions(function)
	}
}

func usePackage(script as Script, pkg as PackageDescription, props as map<string,string>)
{
	var sn = pkg.getShortName()
	if String.isEmpty(sn):
		throw ScriptException.forError(pkg.getSource(), "Package has no short name")
	if Map.get(props, sn):
		return
	try:
		installPackage(pkg)
	catch e as Exception:
		throw ScriptException.forError(pkg.getSource(), String.asString(e))
	var cdir = getInstallationDirectory(pkg)
	if not cdir:
		throw ScriptException.forError(pkg.getSource(), "Failed to find cached directory even after installation")
	var cpath = cdir.getPath() .. "/data"
	props[sn] = cpath
	processExternalPackageScripts(script, cpath)
}

func processScript(script as Script, props as map<string,string>)
{
	var myprops = new map<string,string>
	foreach pkg in script.getUses():
		usePackage(script, pkg, props)
	foreach key in Map.getKeys(myprops) as! vector<string>:
		props[key] = Map.get(myprops, key)
	var sprops = script.getProperties()
	if sprops {
		foreach key in Map.getKeys(sprops) as! vector<string>:
			props[key] = Map.get(sprops, key)
	}
}

func doExecuteScript(script as Script, function as string, args as vector<string>) private
{
	var props = new map<string,string>
	if defaultProperties {
		foreach key in Map.getKeys(defaultProperties) as! vector<string>:
			props[key] = Map.get(defaultProperties, key)
	}
	if customPackagePaths {
		foreach key in Map.getKeys(customPackagePaths) as! vector<string> {
			var cp = Map.get(customPackagePaths, key)
			if not cp:
				continue
			props[key] = cp.getPath()
			processExternalPackageScripts(script, cp)
			continue
		}
	}
	processScript(script, props)
	var n = 0
	loop {
		n ++
		if n > 10:
			throw ScriptException.forError(script.getSourceReference(), "Too many recursions in substituting script variables")
		var cc = 0
		foreach key in Map.getKeys(props) as! vector<string> {
			var val = Map.get(props, key)
			var vals = processExpression(script.getSourceReference(), val, props)
			if String.equals(val, vals) == false {
				props[key] = vals
				cc ++
			}
		}
		if cc == 0:
			break
	}
	executeScriptFunction(script, function, props, args)
}

func executeScript(script as Script, function as string, args as vector<string>) as bool
{
	var v = true
	try {
		if not script:
			throw ExceptionWithString.forString("No script given to executeScript")
		doExecuteScript(script, function, args)
	}
	catch e as Exception {
		Log.error(ctx, String.asString(e))
		v = false
	}
	return v
}
