
/*
 * This file is part of Eqela Tools
 * Copyright (c) 2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class is Builder:

func getBuilderId as string:
	return "androidGradle"

func findGradleExecutableForPath(path as string) private as File
{
	assert String.isNotEmpty(path)
	var ff = File.forPath(path)
	if ff.isFile():
		return ff
	if ff.isDirectory() {
		var v = ff.entry("bin").entry("gradle").asExecutable()
		if v.isFile():
			return v
		v = ff.entry("gradle").asExecutable()
		if v.isFile():
			return v
	}
	return null
}

func findGradleExecutable(ctx as MyContext) private as File
{
	var v = ctx.tryFindCommand(ctx.getGradlePath(), "gradle")
	if v:
		return v
	var androidStudioDir as File
	if OS.isMacOS() {
		androidStudioDir = File.forPath("/Applications/Android Studio.app/Contents/gradle")
	}
	else if OS.isWindows() {
		IFDEF("target_dotnet4cs") {
			androidStudioDir = File.forPath(lang "cs" string {{{ System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFiles) }}}).entry("Android").entry("Android Studio").entry("gradle")
			if(androidStudioDir.isDirectory() == false) {
				androidStudioDir = File.forPath(lang "cs" string {{{ System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86) }}}).entry("Android").entry("Android Studio").entry("gradle")
			}
			if(androidStudioDir.isDirectory() == false) {
				androidStudioDir = File.forPath("C:\\Program Files\\Android\\Android Studio\\gradle")
			}
			if(androidStudioDir.isDirectory() == false) {
				androidStudioDir = File.forPath("C:\\Program Files (x86)\\Android\\Android Studio\\gradle")
			}
			if(androidStudioDir.isDirectory() == false) {
				androidStudioDir = null
			}
		}
		ELSE {
			;
		}
	}
	if androidStudioDir && androidStudioDir.isDirectory() {
		var it = androidStudioDir.entries()
		while it {
			var g = it.next()
			if g == null:
				break
			if g.isDirectory() == false:
				continue
			var bn = g.baseName()
			if String.startsWith(bn, "gradle-") {
				var v = findGradleExecutableForPath(g.getPath())
				if v:
					return v
				ctx.debug("Not a valid Gradle path: `" .. ctx.fileToString(g) .. "'")
			}
		}
	}
	ctx.error("Command not found: `gradle'")
	return null
}

func canBuild(dir as File) as bool
{
	assert dir
	if dir.entry("AndroidManifest.xml").isFile():
		return true
	return false
}

func execute(ctx as MyContext, sourceDirectory as File, destinationDirectory as File) as bool
{
	var dir = assert sourceDirectory:
		ctx.error("No source directory")
	assert dir.isDirectory():
		ctx.error("Source directory does not exist: `" .. ctx.fileToString(dir) .. "'")
	ctx.debug("Using source directory: `" .. ctx.fileToString(dir) .. "'")
	var gradleExe = assert findGradleExecutable(ctx)
	ctx.debug("Using Gradle command: `" .. ctx.fileToString(gradleExe) .. "'")
	var sdkPath = assert AndroidSDK.findAndroidSDKDirectory(ctx)
	ctx.debug("Using Android SDK: `" .. ctx.fileToString(sdkPath) .. "'")
	ctx.info("Executing Gradle build: `" .. ctx.fileToString(dir) .. "' ..")
	var errorBuffer as StringBuilder
	if ctx.isDebug():
		errorBuffer = new cape.StringBuilder()
	var args as array
	if ctx.getBuildRelease() {
		args = [ "build" ]
	}
	else {
		args = [ "assembleDebug", "-x", "lint" ]
	}
	var pl = ProcessLauncher.forFile(gradleExe, args)
	pl.setErrorBuffer(errorBuffer)
	pl.setCwd(dir)
	pl.setEnvVariable("ANDROID_HOME", sdkPath.getPath())
	var r = pl.execute()
	if errorBuffer && errorBuffer.count() > 0 {
		ctx.debug("Gradle execution error buffer: `" .. errorBuffer.toString() .. "'")
	}
	if r != 0 {
		ctx.error("Gradle build returned an error status: " .. String.forInteger(r))
		return false
	}
	ctx.debug("Gradle build succesful")
	var destdir = destinationDirectory
	if destdir {
		destdir.createDirectoryRecursive()
		var aarDir = dir.entry("build").entry("outputs").entry("aar")
		var it = aarDir.entries()
		while it {
			var file = it.next()
			if not file:
				break
			var dest = destdir.entry(file.baseName())
			ctx.debug("Copying `" .. ctx.fileToString(file) .. "' -> `" .. ctx.fileToString(dest) .. "' ..")
			assert file.copyFileTo(dest):
				ctx.error("Failed to copy `" .. ctx.fileToString(file) .. "' -> `" .. ctx.fileToString(dest) .. "'")
		}
		var apkDir = dir.entry("build").entry("outputs").entry("apk")
		var it2 = apkDir.entries()
		while it2 {
			var file = it2.next()
			if not file:
				break
			if file.hasExtension("apk") == false:
				continue
			var bn = file.baseName()
			if String.startsWith(bn, "src-"):
				continue
			var dest = destdir.entry(bn)
			ctx.debug("Copying `" .. ctx.fileToString(file) .. "' -> `" .. ctx.fileToString(dest) .. "' ..")
			assert file.copyFileTo(dest):
				ctx.error("Failed to copy `" .. ctx.fileToString(file) .. "' -> `" .. ctx.fileToString(dest) .. "'")
		}
	}
	return true
}
