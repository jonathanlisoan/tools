
/*
 * This file is part of Eqela Tools
 * Copyright (c) 2018 Job and Esther Technologies Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

prop ctx as LoggingContext
prop paranoid = false
prop paths = new map<string,string>
prop options = new map<string,string>
prop searchCommandsInPath = false
prop gradlePath as File
prop msbuildPath as File
prop dotnetPath as File
prop npmPath as File
prop npxPath as File
prop podPath as File
prop xcodebuildPath as File
prop androidSdkPath as File
prop buildRelease = false
prop targetPlatform as string
prop updateDependencies = true
prop libdirs as vector<File>

func addToLibdirs(dir as File)
{
	assert dir
	if not libdirs:
		libdirs = new vector<File>
	libdirs += dir
}

func isDebug as bool:
	return ctx.isInDebugMode()

func debug(message as string):
	Log.debug(ctx, message)

func info(message as string):
	Log.info(ctx, message)

func warning(message as string):
	Log.warning(ctx, message)

func error(message as string):
	Log.error(ctx, message)

func status(message as string):
	Log.status(ctx, message)

func fileToString(file as File) as string
{
	assert file
	if paranoid {
		var bn = file.baseName()
		var dn as string
		var pp = file.getParent()
		if pp:
			dn = pp.baseName()
		if String.isEmpty(dn):
			return bn
		var sb = new StringBuilder()
		sb.append(dn)
		sb.append(Environment.getPathSeparator())
		sb.append(bn)
		return sb.toString()
	}
	return file.getPath()
}

func tryFindCommand(path as File, name as string) as File
{
	assert name
	if path {
		if path.isFile():
			return path
		if path.isDirectory() {
			var vv = path.entry(name).asExecutable()
			if vv.isFile() == false:
				vv = path.entry("bin").entry(name).asExecutable()
			if vv.isFile():
				return vv
		}
		debug("Not a valid path for `" .. name .. "': `" .. fileToString(path) .. "'")
		return null
	}
	if searchCommandsInPath {
		var exe = Environment.findCommand(name)
		if exe && exe.isFile():
			return exe
	}
	debug("Command not found: `" .. name .. "'")
	return null
}

func findCommand(path as File, name as string) as File
{
	var v = assert tryFindCommand(path, name):
		error("Command not found: `" .. name .. "'")
	debug("Found command `" .. name .. "': `" .. fileToString(v) .. "'")
	return v
}
